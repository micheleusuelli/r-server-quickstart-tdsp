par <- jsonlite::fromJSON("config/1-parameters.json")
par <- jsonlite::fromJSON("config/1-parameters.json")
par <- jsonlite::fromJSON("config/1-parameters.json")
par
par <- jsonlite::fromJSON("config/1-parameters.json")
par
par <- jsonlite::fromJSON("config/1-parameters.json")
xdf
source('C:/Users/micheleu/OneDrive - Microsoft/Documents/2_docs_clients/2017/otis/code/ip/lab-1-features/0-config.R', echo=TRUE)
source('C:/Users/micheleu/OneDrive - Microsoft/Documents/1_docs_microsoft/3_docs_projects/2_community/1_aa_community/4-code/tdsp-r-project/explore-data/0-config.R', echo=TRUE)
write.csv(iris, file = "../data-raw/iris.csv")
parseArgNamed
par_terminal <- parseArgNamed()
csv_in <- file.path(par$folder_data_raw, par$csv_in) %>%
RxTextData()
# load and clean the data
# configure ---------------------------------------------------------------
rm(list = ls())
source("0-config.R")
# parse-terminal-arguments ------------------------------------------------
# parse the terminal arguments
par_terminal <- parseArgNamed()
# clean -------------------------------------------------------------------
csv_in <- file.path(par$folder_data_raw, par$csv_in) %>%
RxTextData()
rxDataStep(inData = csv_in,
outFile = xdf$raw,
overwrite = TRUE)
rxGetVarInfo(xdf$raw)
write.csv(iris, file = "../data-raw/iris.csv", row.names = NULL)
write.csv(iris, file = "../data-raw/iris.csv", row.names = F)
# load and clean the data
# configure ---------------------------------------------------------------
rm(list = ls())
source("0-config.R")
# parse-terminal-arguments ------------------------------------------------
# parse the terminal arguments
par_terminal <- parseArgNamed()
# clean -------------------------------------------------------------------
csv_in <- file.path(par$folder_data_raw, par$csv_in) %>%
RxTextData()
rxDataStep(inData = csv_in,
outFile = xdf$raw,
overwrite = TRUE)
rxGetVarInfo(xdf$raw)
rxDataStep(inData = xdf$raw,
outFile = xdf$cleaned,
overwrite = TRUE)
rxGetVarInfo(xdf$raw)
rxFactors(inData = xdf$raw,
outFile = xdf$cleaned,
factorInfo = "Species",
overwrite = TRUE)
rxGetVarInfo(cleaned)
rxFactors(inData = xdf$raw,
outFile = xdf$cleaned,
factorInfo = "Species",
overwrite = TRUE)
rxGetVarInfo(xdf$cleaned)
csv_in <- file.path(par$folder_data_raw, par$csv_in) %>%
RxTextData()
rxDataStep(inData = csv_in,
outFile = xdf$raw,
overwrite = TRUE)
rxGetVarInfo(xdf$raw)
rxFactors(inData = xdf$raw,
outFile = xdf$cleaned,
factorInfo = "Species",
overwrite = TRUE)
rxGetVarInfo(xdf$cleaned)
parseArgNamed
# load and clean the data
# configure ---------------------------------------------------------------
rm(list = ls())
source("0-config.R")
# load --------------------------------------------------------------------
# load
df_in <- iris
# explore -----------------------------------------------------------------
input <- list(Species = iris$Species[1])
app <- shinyApp(
ui = fluidPage(
# title
h1("Chart"),
fluidRow(
column(2,
selectInput(inputId = "Species", label = "Species",
choices = df_in$Species %>%
unique,
selected = 1))
),
fluidRow(
plotOutput("chartout")
),
fluidRow(
dataTableOutput(outputId = "tableout")
)
),
server = function(input, output) {
output$chartout <- renderPlot({
df_in %>%
filter(Species == input$Species) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
ggtitle(sprintf("sepal scatterplot for %s", input$Species))
})
output$tableout <- renderDataTable({
df_in %>%
filter(Species == input$Species)
})
}
)
runApp(app)
# load and clean the data
# configure ---------------------------------------------------------------
rm(list = ls())
source("0-config.R")
# load --------------------------------------------------------------------
# load
df_in <- iris
# explore -----------------------------------------------------------------
input <- list(Species = iris$Species[1])
app <- shinyApp(
ui = fluidPage(
# title
h1("Chart"),
fluidRow(
column(2,
selectInput(inputId = "Species", label = "Species",
choices = df_in$Species %>%
unique,
selected = 1))
),
fluidRow(
plotOutput("chartout")
),
fluidRow(
dataTableOutput(outputId = "tableout")
)
),
server = function(input, output) {
output$chartout <- renderPlot({
df_in %>%
filter(Species == input$Species) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
ggtitle(sprintf("sepal scatterplot for %s", input$Species))
})
output$tableout <- renderDataTable({
df_in %>%
filter(Species == input$Species)
})
}
)
runApp(app)
